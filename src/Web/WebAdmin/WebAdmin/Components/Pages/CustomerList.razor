@page "/customer/list"
@using Microsoft.Extensions.Localization
@attribute [StreamRendering]
@inject AdminConfiguration AdminConfiguration
@inject IStringLocalizer<CustomerList> L

<PageTitle>@L["PageTitle"] - @AdminConfiguration.PageTitle</PageTitle>

<h1>会员</h1>

<p>This component demonstrates showing data.</p>


@if (_customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@_customers" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="CustomerTable">
        <PropertyColumn Title="姓名" Property="@(c => c!.Name)" Align="Align.End" />
        <PropertyColumn Title="年龄. (C)" Property="@(c => c!.Age)" Align="Align.Center" />
        <PropertyColumn Title="生日" Property="@(c => c!.BirthDate)" Align="Align.Start" />
    </FluentDataGrid>
}

@code {
    private IQueryable<CustomerTable>? _customers;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        _customers = Enumerable.Range(1, 5).Select(index => new CustomerTable
        {
            BirthDate = startDate.AddDays(index),
            Age = Random.Shared.Next(-20, 55),
            Name = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    private class CustomerTable
    {
        public int Age { get; init; }
        public string? Name { get; init; }
        public DateOnly BirthDate { get; init; }
    }
}
